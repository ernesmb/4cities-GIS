{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Geographic Information Systems Methods and techniques for urban sustainability Erasmus Mundus Master Course in Urban Studies - \u201c4 Cities\u201d 12th Cohort/2021 - Universidad Aut\u00f3noma de Madrid ernesmb.github.io/4cities-GIS Ernesto Mart\u00ednez Becerra Geographer, Geospatial technology specialist. Product Manager at CARTO . ernesmb@gmail.com | @ernesmb Course methodology During the next week, we'll learn about Geographic Information Systems methods and techniques, that can be used for urban studies and planning. The learning material is organized in different sections in the left panel. Each section contains links to pieces of open source learning material about a specific aspect or technology around GIS and geospatial technology. Also for each section I will propose optional exercises to help you navigate through the documentation. Resources Course material source code Download QGIS Get a CARTO account Natural Earth Data ColorBrewer GitHub Gists bl.ocks.org Google Colab Further reading How to lie with maps - Mark Monmonier The power of maps - Denis Wood Rethinking the power of maps - Denis Wood An introduction to GIS - A free book by Victor Olaya - link","title":"Hello"},{"location":"#geographic-information-systems","text":"Methods and techniques for urban sustainability Erasmus Mundus Master Course in Urban Studies - \u201c4 Cities\u201d","title":"Geographic Information Systems"},{"location":"#12th-cohort2021-universidad-autonoma-de-madrid","text":"ernesmb.github.io/4cities-GIS","title":"12th Cohort/2021 - Universidad Aut\u00f3noma de Madrid"},{"location":"#ernesto-martinez-becerra","text":"Geographer, Geospatial technology specialist. Product Manager at CARTO . ernesmb@gmail.com | @ernesmb","title":"Ernesto Mart\u00ednez Becerra"},{"location":"#course-methodology","text":"During the next week, we'll learn about Geographic Information Systems methods and techniques, that can be used for urban studies and planning. The learning material is organized in different sections in the left panel. Each section contains links to pieces of open source learning material about a specific aspect or technology around GIS and geospatial technology. Also for each section I will propose optional exercises to help you navigate through the documentation.","title":"Course methodology"},{"location":"#resources","text":"Course material source code Download QGIS Get a CARTO account Natural Earth Data ColorBrewer GitHub Gists bl.ocks.org Google Colab","title":"Resources"},{"location":"#further-reading","text":"How to lie with maps - Mark Monmonier The power of maps - Denis Wood Rethinking the power of maps - Denis Wood An introduction to GIS - A free book by Victor Olaya - link","title":"Further reading"},{"location":"01_intro/","text":"An introduction to GIS Let's make some introductions to know each other a bit better :) After that, let's take a look at this brief introduction to GIS .","title":"Intro to GIS"},{"location":"01_intro/#an-introduction-to-gis","text":"Let's make some introductions to know each other a bit better :) After that, let's take a look at this brief introduction to GIS .","title":"An introduction to GIS"},{"location":"02_carto/","text":"CARTO (webinar) Welcome! Here are the slides from our online session about CARTO. Here are a few more examples of how CARTO is being used to learn about our cities: Informo Madrid Traffic fines in Madrid NYC Crime map Traffic accidents and London weather Madrid trash's map Bus lines performance in Madrid Cadaster info in Benidorm Percentage of population below poverty threshold in NYC How New York was built BBVA Urban Discovery Atlas of inequality Global Forest Watch","title":"CARTO office"},{"location":"02_carto/#carto-webinar","text":"Welcome! Here are the slides from our online session about CARTO. Here are a few more examples of how CARTO is being used to learn about our cities: Informo Madrid Traffic fines in Madrid NYC Crime map Traffic accidents and London weather Madrid trash's map Bus lines performance in Madrid Cadaster info in Benidorm Percentage of population below poverty threshold in NYC How New York was built BBVA Urban Discovery Atlas of inequality Global Forest Watch","title":"CARTO (webinar)"},{"location":"03_qgis/","text":"Open Source GIS: QGIS There are plenty of options if you need to work with a GIS, that don't imply acquiring a very expensive license or subscribing to an online service. Even more importantly, many of them come from a joint community effort (sometimes sponsored by companies or public institutions), and they work following the Open Source principles, which \"grant users the rights to study, change, and distribute the software to anyone and for any purpose\" Among these options, QGIS is hands down the most popular choice, as a standalone system or along with other products for different, specific purposes: PostgreSQL / PostGIS , Openlayers , OpenStreetMap , Geoserver , and many, many more. Some of the projects mentioned above are part of OSGeo , The Open Source Geospatial Foundation, that works towards driving global adoption of open geospatial technology. QGIS is also an excellent tool for learning GIS, from the very basics to almost any kind of professional project. There is plenty of high quality learning material available on the web, created and maintained up to date by the QGIS community or third parties. For our course, we will use the Official Training manual . So, first thing is installing QGIS on your computer. There are installers for Windows, Mac and Linux available at the official Download page . You will see that there are two different versions available: 3.18 'Z\u00fcrich' is the latest version. 3.16.4 'Hannover' is the Long Term Release (LTR) version. This version is more stable and has an extended support period. The materials we're following are based on this version. Exercises Once installed, these are the recommended exercises: Read this introduction to GIS Dig a bit deeper into different geospatial data types: Vector and Raster Learn about different Coordinate Reference Systems , and try to make a rectangle with an orange's peels ;) Create your first map, following this exercise . You can also try and load a different dataset from Natural Earth Data . Start working with vector data on this exercise . Learn the basics about symbology . Start working with raster data here . The sample data used in the exercises is available here . As explained here , exercises are tagged as \"Basic\" , \"Intermediate\" or \"Advanced\" based on its difficulty or level of expertise required. I'd recommend completing at least the \"Basic\" level exercises, but of course, feel free to try with a higher level if you feel comfortable with it.","title":"QGIS I"},{"location":"03_qgis/#open-source-gis-qgis","text":"There are plenty of options if you need to work with a GIS, that don't imply acquiring a very expensive license or subscribing to an online service. Even more importantly, many of them come from a joint community effort (sometimes sponsored by companies or public institutions), and they work following the Open Source principles, which \"grant users the rights to study, change, and distribute the software to anyone and for any purpose\" Among these options, QGIS is hands down the most popular choice, as a standalone system or along with other products for different, specific purposes: PostgreSQL / PostGIS , Openlayers , OpenStreetMap , Geoserver , and many, many more. Some of the projects mentioned above are part of OSGeo , The Open Source Geospatial Foundation, that works towards driving global adoption of open geospatial technology. QGIS is also an excellent tool for learning GIS, from the very basics to almost any kind of professional project. There is plenty of high quality learning material available on the web, created and maintained up to date by the QGIS community or third parties. For our course, we will use the Official Training manual . So, first thing is installing QGIS on your computer. There are installers for Windows, Mac and Linux available at the official Download page . You will see that there are two different versions available: 3.18 'Z\u00fcrich' is the latest version. 3.16.4 'Hannover' is the Long Term Release (LTR) version. This version is more stable and has an extended support period. The materials we're following are based on this version.","title":"Open Source GIS: QGIS"},{"location":"03_qgis/#exercises","text":"Once installed, these are the recommended exercises: Read this introduction to GIS Dig a bit deeper into different geospatial data types: Vector and Raster Learn about different Coordinate Reference Systems , and try to make a rectangle with an orange's peels ;) Create your first map, following this exercise . You can also try and load a different dataset from Natural Earth Data . Start working with vector data on this exercise . Learn the basics about symbology . Start working with raster data here . The sample data used in the exercises is available here . As explained here , exercises are tagged as \"Basic\" , \"Intermediate\" or \"Advanced\" based on its difficulty or level of expertise required. I'd recommend completing at least the \"Basic\" level exercises, but of course, feel free to try with a higher level if you feel comfortable with it.","title":"Exercises"},{"location":"04_qgis/","text":"Open Source GIS: QGIS II On this second session, we'll get a bit more familiar with some of the most usual GIS techniques: symbolization, map composition and some basic geospatial analysis. Cartography and symbolization are crucial for conveying a message through the visualization of geospatial data. The wrong color scheme, data classification or mapping technique can make your map unreadable, create a wrong idea on the reader or even manipulate ideas on purpose. Here is a great post from the Design and Support teams at Mapbox , talking about general best practices applied to mapping pandemic data. On the same topic, here is a very interesting thread about bad practices when mapping Coronavirus data. Reading both references above, you'd notice that they agree upon the need of normalizing the data. Data normalization is a very important step when creating visualizations. Rather than showing absolute values, we should always calculate ratios, percentages, weighted averages, divide by population, by area, or any other operation that gives context to the data and help the map's reader to understand the visualization and the underlying data analysis. For example, without normalization, almost any measure we want to visualize that is relative to human behavior, will look like a population map: there is always more probability of occurence of any phenomenon where there are more people living. Here are XKCD's views on the subject: Once you are more familiar with the first concepts, as loading and visualizing geospatial data, we can start getting into geospatial analysis. The Wikipedia entry about Spatial Analysis is actually a very good introduction to the matter, that I recommend reading carefully. How can geospatial analysis help in Urban Planning / Development? It can help us determine how growing populations affect energy consumption, transportation, public services or housing resources. It also allows for compiling and cross-filtering data from many sources to see how crime, public health, education and housing/real estate outcomes vary by location. (from this article ). New data streams, as such provided by telco companies, mobile GPS data or real-time traffic information can help the urban analyst to draw a new picture of life in the cities. Exercises Add some text labels to your map . Learn the basics about data classification and color ramps . You can also take a look at ColorBrewer , a very well known tool that helps choosing color palettes for maps; and to CARTOcolors , more modern color palettes by Mamata Akella . Learn more about Proportional Symbols , best practices and Cartography principles. Create a printable map layout . Analyze data and solve a spatial problem with GIS techniques following this section","title":"QGIS II"},{"location":"04_qgis/#open-source-gis-qgis-ii","text":"On this second session, we'll get a bit more familiar with some of the most usual GIS techniques: symbolization, map composition and some basic geospatial analysis. Cartography and symbolization are crucial for conveying a message through the visualization of geospatial data. The wrong color scheme, data classification or mapping technique can make your map unreadable, create a wrong idea on the reader or even manipulate ideas on purpose. Here is a great post from the Design and Support teams at Mapbox , talking about general best practices applied to mapping pandemic data. On the same topic, here is a very interesting thread about bad practices when mapping Coronavirus data. Reading both references above, you'd notice that they agree upon the need of normalizing the data. Data normalization is a very important step when creating visualizations. Rather than showing absolute values, we should always calculate ratios, percentages, weighted averages, divide by population, by area, or any other operation that gives context to the data and help the map's reader to understand the visualization and the underlying data analysis. For example, without normalization, almost any measure we want to visualize that is relative to human behavior, will look like a population map: there is always more probability of occurence of any phenomenon where there are more people living. Here are XKCD's views on the subject: Once you are more familiar with the first concepts, as loading and visualizing geospatial data, we can start getting into geospatial analysis. The Wikipedia entry about Spatial Analysis is actually a very good introduction to the matter, that I recommend reading carefully. How can geospatial analysis help in Urban Planning / Development? It can help us determine how growing populations affect energy consumption, transportation, public services or housing resources. It also allows for compiling and cross-filtering data from many sources to see how crime, public health, education and housing/real estate outcomes vary by location. (from this article ). New data streams, as such provided by telco companies, mobile GPS data or real-time traffic information can help the urban analyst to draw a new picture of life in the cities.","title":"Open Source GIS: QGIS II"},{"location":"04_qgis/#exercises","text":"Add some text labels to your map . Learn the basics about data classification and color ramps . You can also take a look at ColorBrewer , a very well known tool that helps choosing color palettes for maps; and to CARTOcolors , more modern color palettes by Mamata Akella . Learn more about Proportional Symbols , best practices and Cartography principles. Create a printable map layout . Analyze data and solve a spatial problem with GIS techniques following this section","title":"Exercises"},{"location":"05_cloud/","text":"Cloud GIS In the last few years, there has been a trend in GIS to create online, subscription based services that allow users to upload and visualize their own data. Focused on design and user experience, a few new players have entered the industry, traditionally lead by ESRI 's solutions, and have made GIS and geospatial technology in general available to a broader audience. Some of them offer free accounts to start playing with, as well as more complex solutions for the big enterprise. Among all the options out there, let's focus on just three of them. CARTO Builder CARTO offers a wide range of products that put together a platform for the analysis and visualization of geospatial data. One of these products is CARTO Builder, which offers the most common functionality in a GIS tool for visualization and analysis, plus sharing options to publish maps online, access to both Open Data and premium, paid datasets from different data providers. Connectivity with different data sources and integratios with other popular tools are also a strength of the CARTO platform, which is built on top of other well known products like PostGIS or Mapnik . There is plenty of learning material available about Builder in CARTO's Help Center . Kepler.gl Kepler.gl is an Open Source visualization tool developed by Uber, that works fully in the client side (your computer's Internet browser). Along with CARTO and other companies in the tech and geo industries, it's part of the Urban Computing Foundation which \"is a neutral forum for accelerating open source and community development that improves mobility, safety, road infrastructure, traffic congestion and energy consumption in connected cities\". Kepler.gl is a great tool for visualizing your data, it has 3D capabilities and a very nice and easy interface. You can use it withouth registering, and it has some sample data to start working with it right away. There is also a very good user's guide available here Mapbox Mapbox provides the building blocks for geospatial applications of many kinds: from cartographic tools for creating basemaps to tools for augmented reality navigation and autonomous cars. Exercises Take a look at Kepler.gl and play with its interface to visualize a sample dataset of your choice. Visualization with CARTO Builder: Trees of San Francisco Analysis with CARTO Builder: The closing of the L line in NYC","title":"Cloud GIS"},{"location":"05_cloud/#cloud-gis","text":"In the last few years, there has been a trend in GIS to create online, subscription based services that allow users to upload and visualize their own data. Focused on design and user experience, a few new players have entered the industry, traditionally lead by ESRI 's solutions, and have made GIS and geospatial technology in general available to a broader audience. Some of them offer free accounts to start playing with, as well as more complex solutions for the big enterprise. Among all the options out there, let's focus on just three of them.","title":"Cloud GIS"},{"location":"05_cloud/#carto-builder","text":"CARTO offers a wide range of products that put together a platform for the analysis and visualization of geospatial data. One of these products is CARTO Builder, which offers the most common functionality in a GIS tool for visualization and analysis, plus sharing options to publish maps online, access to both Open Data and premium, paid datasets from different data providers. Connectivity with different data sources and integratios with other popular tools are also a strength of the CARTO platform, which is built on top of other well known products like PostGIS or Mapnik . There is plenty of learning material available about Builder in CARTO's Help Center .","title":"CARTO Builder"},{"location":"05_cloud/#keplergl","text":"Kepler.gl is an Open Source visualization tool developed by Uber, that works fully in the client side (your computer's Internet browser). Along with CARTO and other companies in the tech and geo industries, it's part of the Urban Computing Foundation which \"is a neutral forum for accelerating open source and community development that improves mobility, safety, road infrastructure, traffic congestion and energy consumption in connected cities\". Kepler.gl is a great tool for visualizing your data, it has 3D capabilities and a very nice and easy interface. You can use it withouth registering, and it has some sample data to start working with it right away. There is also a very good user's guide available here","title":"Kepler.gl"},{"location":"05_cloud/#mapbox","text":"Mapbox provides the building blocks for geospatial applications of many kinds: from cartographic tools for creating basemaps to tools for augmented reality navigation and autonomous cars.","title":"Mapbox"},{"location":"05_cloud/#exercises","text":"Take a look at Kepler.gl and play with its interface to visualize a sample dataset of your choice. Visualization with CARTO Builder: Trees of San Francisco Analysis with CARTO Builder: The closing of the L line in NYC","title":"Exercises"},{"location":"06_geodb/","text":"Geospatial Databases: PostGIS A geospatial database is basically a very handy tool for storing data that has a spatial component. As other ( relational ) databases, it stores data in tabular format, where each table is structured in: Rows represent each occurence of the data we're storing. Columns represent the attributes associated to each row. What makes a geospatial database geospatial is that in addition to numbers, text, arrays and booleans, it can store and operate with a special data type, that represent the shape and location of objects in the surface of Earth. As you may know already, one can ask questions to a database, using a language called SQL (Structured Query Language). Using SQL , we could filter, aggregate and order our data, but also transform it or obtain calculated columns. The kind of questions we can ask a geospatial database are something like: Which houses are closer than 100m from a Metro station? How many accidents happened in this segment of the street in the last year? Where are the 10 closest grocery stores from this location? What's the tree species distribution like in this park? Using a database (instead of files) to store data has many advantages, as it allows storing and querying bigger volumes of data in a more organized, structured and performant way. PostGIS PostGIS is an Open Source extension that adds geospatial capabilities (data types, functions and operators) to a PostgreSQL database. PostGIS is the foundation for many other projects, such as CARTO. Take a look at this amazing talk from Paul Ramsey , one of the main contributors to the PostGIS project. It can get a bit too technical, but it's a really great introduction to PostGIS and geospatial databases in general. Resources Other useful links: PostGIS Project and official docs WKT encoding Modern SQL Use the Index, Luke Pattern matching expressions Fill the gaps between two geometries Jump across the Date Line EPSG codes databases: http://epsg.io/ http://spatialreference.org/ Free your maps from Web Mercator Stored procedures that return the Antipode's point for an input geometry Exercise Introduction to Spatial SQL","title":"Geospatial databases"},{"location":"06_geodb/#geospatial-databases-postgis","text":"A geospatial database is basically a very handy tool for storing data that has a spatial component. As other ( relational ) databases, it stores data in tabular format, where each table is structured in: Rows represent each occurence of the data we're storing. Columns represent the attributes associated to each row. What makes a geospatial database geospatial is that in addition to numbers, text, arrays and booleans, it can store and operate with a special data type, that represent the shape and location of objects in the surface of Earth. As you may know already, one can ask questions to a database, using a language called SQL (Structured Query Language). Using SQL , we could filter, aggregate and order our data, but also transform it or obtain calculated columns. The kind of questions we can ask a geospatial database are something like: Which houses are closer than 100m from a Metro station? How many accidents happened in this segment of the street in the last year? Where are the 10 closest grocery stores from this location? What's the tree species distribution like in this park? Using a database (instead of files) to store data has many advantages, as it allows storing and querying bigger volumes of data in a more organized, structured and performant way.","title":"Geospatial Databases: PostGIS"},{"location":"06_geodb/#postgis","text":"PostGIS is an Open Source extension that adds geospatial capabilities (data types, functions and operators) to a PostgreSQL database. PostGIS is the foundation for many other projects, such as CARTO. Take a look at this amazing talk from Paul Ramsey , one of the main contributors to the PostGIS project. It can get a bit too technical, but it's a really great introduction to PostGIS and geospatial databases in general.","title":"PostGIS"},{"location":"06_geodb/#resources","text":"Other useful links: PostGIS Project and official docs WKT encoding Modern SQL Use the Index, Luke Pattern matching expressions Fill the gaps between two geometries Jump across the Date Line EPSG codes databases: http://epsg.io/ http://spatialreference.org/ Free your maps from Web Mercator Stored procedures that return the Antipode's point for an input geometry","title":"Resources"},{"location":"06_geodb/#exercise","text":"Introduction to Spatial SQL","title":"Exercise"},{"location":"07_webmaps/","text":"Webmapping There are plenty of options when it comes to development libraries for creating webmaps. We'll only focus on a handful of them, which are Open Source and relatively easy to use. Leaflet.js LeafletJS is a very powerful, yet easy library that allows creating webmaps with just a few lines of code. It plays very well with mobile devices and different screen sizes. It has a very good documentation and some very handy examples . Leaflet is quite popular, and it works as the base for other libraries that add functionality on top of it. It also has a growing ecosystem of plugins , developed by the community that add or improves the core functionality. OpenLayers OpenLayers was one of the first options out there, already a few years ago. It's part of the OSGeo foundation and it offers a lot of functionality, and integration with other geospatial products. As complexity and functionality grows, things become a bit more difficult to do with this library. OpenStreetMap OpenStreetMap is a collaborative map of the world. We could understand it as \"the Wikipedia of maps\". It's not exactly a development library, but it is really useful a as global geospatial database containing information about streets, buildings, roads, national parks, points of interests and much more. Checkout the Humanitarian OpenStreetMap Team which is a 100% volunteer international team dedicated to humanitarian action and community development. They organize \"mapathons\" all around the world when there is a humanitarian crisis, to map the land and help the NGOs deployed in the field. MapboxGL.js and Mapbox.js Mapbox has its own alternatives for webmapping . They're designed to work with the rest of the Mapbox ecosystem. CARTO.js and CARTO VL CARTO also has its own libraries for loading data layers and create interactive webmaps and visualizations, working along with the rest of the CARTO stack. CARTO.js for raster tiles and CARTO VL for vector tiles. Exercise We're going to create a basic webmap using LeafletJS . In the exercise, there are links to live examples , where you can edit the code and see how the map changes, without fear of breaking anything ;) Feel free to explore, change parameters and try and customize the example on your own.","title":"Webmapping"},{"location":"07_webmaps/#webmapping","text":"There are plenty of options when it comes to development libraries for creating webmaps. We'll only focus on a handful of them, which are Open Source and relatively easy to use.","title":"Webmapping"},{"location":"07_webmaps/#leafletjs","text":"LeafletJS is a very powerful, yet easy library that allows creating webmaps with just a few lines of code. It plays very well with mobile devices and different screen sizes. It has a very good documentation and some very handy examples . Leaflet is quite popular, and it works as the base for other libraries that add functionality on top of it. It also has a growing ecosystem of plugins , developed by the community that add or improves the core functionality.","title":"Leaflet.js"},{"location":"07_webmaps/#openlayers","text":"OpenLayers was one of the first options out there, already a few years ago. It's part of the OSGeo foundation and it offers a lot of functionality, and integration with other geospatial products. As complexity and functionality grows, things become a bit more difficult to do with this library.","title":"OpenLayers"},{"location":"07_webmaps/#openstreetmap","text":"OpenStreetMap is a collaborative map of the world. We could understand it as \"the Wikipedia of maps\". It's not exactly a development library, but it is really useful a as global geospatial database containing information about streets, buildings, roads, national parks, points of interests and much more. Checkout the Humanitarian OpenStreetMap Team which is a 100% volunteer international team dedicated to humanitarian action and community development. They organize \"mapathons\" all around the world when there is a humanitarian crisis, to map the land and help the NGOs deployed in the field.","title":"OpenStreetMap"},{"location":"07_webmaps/#mapboxgljs-and-mapboxjs","text":"Mapbox has its own alternatives for webmapping . They're designed to work with the rest of the Mapbox ecosystem.","title":"MapboxGL.js and Mapbox.js"},{"location":"07_webmaps/#cartojs-and-carto-vl","text":"CARTO also has its own libraries for loading data layers and create interactive webmaps and visualizations, working along with the rest of the CARTO stack. CARTO.js for raster tiles and CARTO VL for vector tiles.","title":"CARTO.js and CARTO VL"},{"location":"07_webmaps/#exercise","text":"We're going to create a basic webmap using LeafletJS . In the exercise, there are links to live examples , where you can edit the code and see how the map changes, without fear of breaking anything ;) Feel free to explore, change parameters and try and customize the example on your own.","title":"Exercise"},{"location":"l_line/","text":"The closing of the L line and NYC demographics We will need the following datasets for this exercise: New York subway stations : subway_nycstations_l . New York subway lines : nyc_subway_lines . New York block group census : nyc_block_group_census . 1. Create a map Click on NEW MAP . Click on CONNECT DATASET . Drag and drop subway_nycstations_l.gpkg . Click on CONNECT DATASET . Click on Don't show me this again to avoid modals. You can rename the map title as \"The L line and demographics\" by double-clicking on it. 2. Layers Add new layers: Click on ADD . Clik on UPLOAD . Find nyc_subway_lines.gpkg on your computre and click on UPLOAD DATASET . Click on ADD LAYER . Reapeat the same for nyc_block_group_census.csv Now, by moving the layers using drag and drop we can change the order in which the layers are being displayed. We move subway_nycstations_l to the top and nyc_subway_lines in the second position. The layer nyc_block_group_census woudl stay at the bottom of the map. Click on one of the layers to show its components: DATA tab : an overview of your table schema, from here you can also add widgets. If you want to have a look at your dataset, click the Data View icon, located on the bottom right of Builder when a map layer is selected. Take a look at the letter and number the layers card has ( A , B or C ). This would be very useful for adding widgets and analysis. Depending on the order in which you added your data, your layer letters could be different than the screenshots. In this example, subway stations were layer A, subway lines layer B, and block groups layer C. 3. Analysis 3.1 Filter by column value Go to the edit pane. Click layer nyc_subway_lines and then select the Analysis tab. Finally, click on the ADD ANALYSIS button in order to add the analysis. Select Filter by column value analysis. Click on ADD ANALYSIS . Set the parameters as follows: TARGET COLUMN : route_id . VALUE : L . RESULTS : show . Now click on APPLY to see the result of the filtering. This is the L subway line. 3.2 Create Travel/Distance buffer analysis We will apply this analysis to the layer subway_nycstations_l . Go back to the LAYERS pane in Builder's interface and click on 0 ANALYSES under subway_nycstations_l. Click on ANALYSIS , then on ADD ANALYSIS . Select the Create Travel/Distance buffer analysis. Click ADD ANALYSIS . In the ANALYSIS tab of the layer, we have three sections: Your workflow : Since this is the first analysis we're adding to the subway_nycstations_l layer, node A , the analysis layer will be named node A1 . Create areas of influence : BASE LAYER : Should be the layer subway_nycstations_l , node A ( A0 ). TYPE : Distance UNIT : mi RADIUS : 1 TRACKS : 1 BOUNDARIES : Intact After clicking APPLY , we should see this result: an area of influence of 1 mile around each subway station. 3.3 Intersect and Aggregate analysis Go to the edit pane. Click layer nyc_block_group_census and then select the Analysis tab. Finally, click on the ADD ANALYSIS button in order to add the analysis. Select Intersect and aggregate analysis. In the ANALYIS tab of the layer, we have three sections: Your workflow : Since this is the first analysis we're adding to the nyc_block_group_census layer, node C , this analysis layer will be named node C1 . Aggregate intersection : Base Layer : By default the base layer would be nyc_block_group_census . Target Layer : select the result layer of the Area of Influence analysis A1 After clicking APPLY , we should see this result: 3.4 Extract source node and reorder layers Since we used our subway station layer as the input for the buffers analysis, the data appears as polygons. We want the buffers to be underneath the subway lines, and to extract the original subway station points for display. From the subway_stations_l layer, drag out the buffers sublayer and place it under the nyc_subway_lines layer This will create a new layer D , and you will see the subway stations drawn on top of the AOI and block group layers 4. Styling Go to the edit pane, click on the AOI layer D and select the STYLE tab. Set the Fill color to a grey with high opacity, and make the stroke grey also. Go to the edit pane, click on the nyc_block_group_census layer D and select the STYLE tab. Set the Fill color to a grey that blends with the basemap layer. 5. Widgets Go to the edit pane and click on the widgets tab. Click on ADD WIDGET button. Under the CATEGORY tab, click on the check box of variables stop_name and ethnic_1st Under the 'HISTOGRAM' tab, click on the check box of variables median_household_income and median_age Under the 'FORMULA' tab, click on the check box of variable total_pop . Click on CONTINUE 5.1 Explore and style data with Widgets Click on the tear drop icon inside each widget to see the Auto-style feature. Filter the data by interacting with the category and histogram widgets. 5.2 Customize widgets Reorder widgets: From WIDGET tab, drag and drop them into your preferred order. Rename widgets: From WIDGET tab, rename each widget by clicking on its three blue dots and selecting the option to Rename . Formula widget calculation: By default, the formula widget is calculating the average population. However, we want to see the sum of the total population within our map view. Click on the three blue dots in the Total Population widget and select the option to 'Edit' In the OPERATION parameter, select sum . 6. Publish Click on SHARE . Set the map's privacy to LINK or PUBLIC . Click on PUBLISH . Now you can share the map: Link: https://team.carto.com/u/builder-demo/builder/144826d6-0982-11e7-bdeb-0e233c30368f/embed iframe: <iframe width=\"100%\" height=\"520\" frameborder=\"0\" src=\"https://team.carto.com/u/builder-demo/builder/144826d6-0982-11e7-bdeb-0e233c30368f/embed\" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe> Remember to update your map every time you make a change. To see those changes refresh your embed, or the web page where your map is hosted.","title":"The closing of the L line and NYC demographics"},{"location":"l_line/#the-closing-of-the-l-line-and-nyc-demographics","text":"We will need the following datasets for this exercise: New York subway stations : subway_nycstations_l . New York subway lines : nyc_subway_lines . New York block group census : nyc_block_group_census .","title":"The closing of the L line and NYC demographics"},{"location":"l_line/#1-create-a-map","text":"Click on NEW MAP . Click on CONNECT DATASET . Drag and drop subway_nycstations_l.gpkg . Click on CONNECT DATASET . Click on Don't show me this again to avoid modals. You can rename the map title as \"The L line and demographics\" by double-clicking on it.","title":"1. Create a map "},{"location":"l_line/#2-layers","text":"Add new layers: Click on ADD . Clik on UPLOAD . Find nyc_subway_lines.gpkg on your computre and click on UPLOAD DATASET . Click on ADD LAYER . Reapeat the same for nyc_block_group_census.csv Now, by moving the layers using drag and drop we can change the order in which the layers are being displayed. We move subway_nycstations_l to the top and nyc_subway_lines in the second position. The layer nyc_block_group_census woudl stay at the bottom of the map. Click on one of the layers to show its components: DATA tab : an overview of your table schema, from here you can also add widgets. If you want to have a look at your dataset, click the Data View icon, located on the bottom right of Builder when a map layer is selected. Take a look at the letter and number the layers card has ( A , B or C ). This would be very useful for adding widgets and analysis. Depending on the order in which you added your data, your layer letters could be different than the screenshots. In this example, subway stations were layer A, subway lines layer B, and block groups layer C.","title":"2. Layers "},{"location":"l_line/#3-analysis","text":"","title":"3. Analysis "},{"location":"l_line/#31-filter-by-column-value","text":"Go to the edit pane. Click layer nyc_subway_lines and then select the Analysis tab. Finally, click on the ADD ANALYSIS button in order to add the analysis. Select Filter by column value analysis. Click on ADD ANALYSIS . Set the parameters as follows: TARGET COLUMN : route_id . VALUE : L . RESULTS : show . Now click on APPLY to see the result of the filtering. This is the L subway line.","title":"3.1 Filter by column value"},{"location":"l_line/#32-create-traveldistance-buffer-analysis","text":"We will apply this analysis to the layer subway_nycstations_l . Go back to the LAYERS pane in Builder's interface and click on 0 ANALYSES under subway_nycstations_l. Click on ANALYSIS , then on ADD ANALYSIS . Select the Create Travel/Distance buffer analysis. Click ADD ANALYSIS . In the ANALYSIS tab of the layer, we have three sections: Your workflow : Since this is the first analysis we're adding to the subway_nycstations_l layer, node A , the analysis layer will be named node A1 . Create areas of influence : BASE LAYER : Should be the layer subway_nycstations_l , node A ( A0 ). TYPE : Distance UNIT : mi RADIUS : 1 TRACKS : 1 BOUNDARIES : Intact After clicking APPLY , we should see this result: an area of influence of 1 mile around each subway station.","title":"3.2 Create Travel/Distance buffer analysis"},{"location":"l_line/#33-intersect-and-aggregate-analysis","text":"Go to the edit pane. Click layer nyc_block_group_census and then select the Analysis tab. Finally, click on the ADD ANALYSIS button in order to add the analysis. Select Intersect and aggregate analysis. In the ANALYIS tab of the layer, we have three sections: Your workflow : Since this is the first analysis we're adding to the nyc_block_group_census layer, node C , this analysis layer will be named node C1 . Aggregate intersection : Base Layer : By default the base layer would be nyc_block_group_census . Target Layer : select the result layer of the Area of Influence analysis A1 After clicking APPLY , we should see this result:","title":"3.3 Intersect and Aggregate analysis"},{"location":"l_line/#34-extract-source-node-and-reorder-layers","text":"Since we used our subway station layer as the input for the buffers analysis, the data appears as polygons. We want the buffers to be underneath the subway lines, and to extract the original subway station points for display. From the subway_stations_l layer, drag out the buffers sublayer and place it under the nyc_subway_lines layer This will create a new layer D , and you will see the subway stations drawn on top of the AOI and block group layers","title":"3.4 Extract source node and reorder layers"},{"location":"l_line/#4-styling","text":"Go to the edit pane, click on the AOI layer D and select the STYLE tab. Set the Fill color to a grey with high opacity, and make the stroke grey also. Go to the edit pane, click on the nyc_block_group_census layer D and select the STYLE tab. Set the Fill color to a grey that blends with the basemap layer.","title":"4. Styling "},{"location":"l_line/#5-widgets","text":"Go to the edit pane and click on the widgets tab. Click on ADD WIDGET button. Under the CATEGORY tab, click on the check box of variables stop_name and ethnic_1st Under the 'HISTOGRAM' tab, click on the check box of variables median_household_income and median_age Under the 'FORMULA' tab, click on the check box of variable total_pop . Click on CONTINUE","title":"5. Widgets "},{"location":"l_line/#51-explore-and-style-data-with-widgets","text":"Click on the tear drop icon inside each widget to see the Auto-style feature. Filter the data by interacting with the category and histogram widgets.","title":"5.1 Explore and style data with Widgets"},{"location":"l_line/#52-customize-widgets","text":"Reorder widgets: From WIDGET tab, drag and drop them into your preferred order. Rename widgets: From WIDGET tab, rename each widget by clicking on its three blue dots and selecting the option to Rename . Formula widget calculation: By default, the formula widget is calculating the average population. However, we want to see the sum of the total population within our map view. Click on the three blue dots in the Total Population widget and select the option to 'Edit' In the OPERATION parameter, select sum .","title":"5.2 Customize widgets"},{"location":"l_line/#6-publish","text":"Click on SHARE . Set the map's privacy to LINK or PUBLIC . Click on PUBLISH . Now you can share the map: Link: https://team.carto.com/u/builder-demo/builder/144826d6-0982-11e7-bdeb-0e233c30368f/embed iframe: <iframe width=\"100%\" height=\"520\" frameborder=\"0\" src=\"https://team.carto.com/u/builder-demo/builder/144826d6-0982-11e7-bdeb-0e233c30368f/embed\" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe> Remember to update your map every time you make a change. To see those changes refresh your embed, or the web page where your map is hosted.","title":"6. Publish "},{"location":"leaflet/","text":"Leaflet.js Getting started Adding a GeoJSON layer Styling a GeoJSON layer Adding a Pop-up Filtering the layer Events Play with a live example Getting started Creating a basic map with Leaflet is actually pretty easy, this Javascript snippet will create a map with a single marker and a popup: var map = L.map('map').setView([51.505, -0.09], 13); L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', { attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }).addTo(map); L.marker([51.5, -0.09]).addTo(map) .bindPopup('A pretty CSS3 popup.<br> Easily customizable.') .openPopup(); Let's see what each part does: Map object var map = L.map('map').setView([51.505, -0.09], 13); There are three different map on that single line! let's elaborate a bit: var map : This is the variable that will hold the map object L.map : This makes reference to the Leaflet map class 'map' : This is the HTML DOM object where we'll render the map This line uses Leaflet's Map class for creating a new map object on the DOM element identified by 'map' . The setView method is necessary in order to center the map to an specific location and zoom level. Tiled layer Most tiled web maps follow certain Google Maps conventions: Tiles are 256x256 pixels At the outer most zoom level, 0, the entire world can be rendered in a single map tile. Each zoom level doubles in both dimensions, so a single tile is replaced by 4 tiles when zooming in. This means that about 22 zoom levels are sufficient for most practical purposes. The Web Mercator projection is used, with latitude limits of around 85 degrees. The de facto OpenStreetMap standard, known as Slippy Map Tilenames or XYZ follows these and adds more: An X and Y numbering scheme PNG images for tiles Images are served through a REST API, with a URL like http(s)://.../Z/X/Y.png , where Z is the zoom level, and X and Y identify the tile. (from Wikipedia: Tiled web map ) Check this link to know more about tiles and how they work This is the code that let us add a tiled layer to a leaflet map: L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', { attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }).addTo(map); Remember to always add the attribution .addTo() is a method of the tileLayer class (and many others) that adds the declared layer to the map object. It expects the variable with the map object as a parameter. Check this tiled layers catalog to find more basemap options. Marker Adding a single marker to a Leaflet map is as easy as: L.marker([51.5, -0.09]).addTo(map) .bindPopup('A pretty CSS3 popup.<br> Easily customizable.') .openPopup(); This adds a marker as a new layer to the map. It expects at least an array with pair of LatLon coordinates. .bindPopup() adds a popup with custom HTML content inside. .openPopup() opens the popup programmatically. Check a live version of this basic example here . Feel free to play with it! Adding a GeoJSON layer Another possibility for adding data to a Leaflet map would be loading a set of geometries (and their properties) using a geoJSON file. We're going to use this Spanish cities dataset . First thing we need to do is storing the geoJSON features in a variable (on populated_places.js file) and load the file on the HTML's <head> section: <script src=\"populated_places.js\"></script> After that, adding the features as a vector layer in Leaflet is quite easy: L.geoJSON(populatedPlaces, {}).addTo(map); Note that we're just referencing the variable name, and not passing any other option to geoJSON() method. We'll come back to that later. This approach has a very important drawback. Vector layers in Leaflet use a lot of memory on the browser, which leads to slow map performance depending on the computer and the amount of features to be loaded. This really wouldn't work for a map with thousands of features, but is a nice and easy approach for a map in the range of a few hundreds features. Styling a GeoJSON layer Let's dig a bit more on how to work with geoJSON layers, with some cartographic enhancements. Leaflet uses functions that return certain values or objects in order to set layer options. For example: pointToLayer option defines the way in which each point geometry is going to be represented on the map. By default it returns a L.marker object, but we can set different options for different symbolizers, such as: javascript pointToLayer: function(feature,latlng){ return L.circleMarker(latlng) } Note the function expects two arguments: feature makes reference to each point feature on the layer. latlng is a L.latLng object that contains the geographic position of the feature. Those arguments could be used inside the function to play with them as you want. They could be called however you like, but bear in mind the first one will always make reference to the feature, and the second to the L.latLng object. style option is used to set the styling rules for the layer. It only expects a feature argument javascript style: function(feature){ return { \"fillColor\":\"#F00\", \"fillOpacity\":0.6, \"stroke\":false, \"radius\":feature.properties.pop_max/100000 } } In this case, the function returns an object with a key/value configuration. It applies the same style to every feature, but we could also add some conditional structure to create a choropleth map. Note that we can use the feature variable inside the function to make reference to the feature's properties and use them to set style rules. There are other options that add functionality to the layer, we'll see some of them later but check this link for the complete reference. Adding a Pop-up We could add a simple, static Popup that shows the same content for every feature in the map, using the bindPopup() method we saw before. However, in order to create dynamic Popups that show information stored as feature properties, we need a different approach. We'll do so by passing another option to L.geoJSON layer declaration: onEachFeature: function(feature,layer){ layer.bindPopup( '<h2>'+feature.properties.name+'</h2>'+ '<b>Population:</b> '+feature.properties.pop_max ) } This will render the HTML code passed as argument to the function, but is also able to get values from the feature properties. Filtering the layer We could also apply a filter based on each feature properties, the filter options iterate over the geojson layer and applies the function we have defined to return true or false depending on whether a feature should be rendered or not. filter: function(feature){ if (feature.properties.pop_max < 100000){ return false } else { return true } } The filter above will only show cities with more than 100K inhabitants. Events Registering an event allows to perform certain actions based on changes on the map state, user interaction, etc We can easily register an event and set the subsequent actions like this: map.on('moveend', function(){ coords.innerHTML='<b> CENTER: </b>'+map.getCenter() }) .on('zoomend', function(){ zoom.innerHTML='<b>ZOOM: </b>'+map.getZoom() }); In this case, we're updating the HTML content of coords and zoom DOM elements after the map position or zoom level changes. We could also listen to layer events: .on('click', function(e){ map.panTo(e.latlng) coords.innerHTML=e.latlng }); In this case, we make use of the event object (referenced with e ), in order to use one of its properties ( e.latlng ) Play with a live example","title":"Leaflet.js"},{"location":"leaflet/#leafletjs","text":"Getting started Adding a GeoJSON layer Styling a GeoJSON layer Adding a Pop-up Filtering the layer Events Play with a live example","title":"Leaflet.js"},{"location":"leaflet/#getting-started","text":"Creating a basic map with Leaflet is actually pretty easy, this Javascript snippet will create a map with a single marker and a popup: var map = L.map('map').setView([51.505, -0.09], 13); L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', { attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }).addTo(map); L.marker([51.5, -0.09]).addTo(map) .bindPopup('A pretty CSS3 popup.<br> Easily customizable.') .openPopup(); Let's see what each part does:","title":"Getting started"},{"location":"leaflet/#map-object","text":"var map = L.map('map').setView([51.505, -0.09], 13); There are three different map on that single line! let's elaborate a bit: var map : This is the variable that will hold the map object L.map : This makes reference to the Leaflet map class 'map' : This is the HTML DOM object where we'll render the map This line uses Leaflet's Map class for creating a new map object on the DOM element identified by 'map' . The setView method is necessary in order to center the map to an specific location and zoom level.","title":"Map object"},{"location":"leaflet/#tiled-layer","text":"Most tiled web maps follow certain Google Maps conventions: Tiles are 256x256 pixels At the outer most zoom level, 0, the entire world can be rendered in a single map tile. Each zoom level doubles in both dimensions, so a single tile is replaced by 4 tiles when zooming in. This means that about 22 zoom levels are sufficient for most practical purposes. The Web Mercator projection is used, with latitude limits of around 85 degrees. The de facto OpenStreetMap standard, known as Slippy Map Tilenames or XYZ follows these and adds more: An X and Y numbering scheme PNG images for tiles Images are served through a REST API, with a URL like http(s)://.../Z/X/Y.png , where Z is the zoom level, and X and Y identify the tile. (from Wikipedia: Tiled web map ) Check this link to know more about tiles and how they work This is the code that let us add a tiled layer to a leaflet map: L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', { attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }).addTo(map); Remember to always add the attribution .addTo() is a method of the tileLayer class (and many others) that adds the declared layer to the map object. It expects the variable with the map object as a parameter. Check this tiled layers catalog to find more basemap options.","title":"Tiled layer"},{"location":"leaflet/#marker","text":"Adding a single marker to a Leaflet map is as easy as: L.marker([51.5, -0.09]).addTo(map) .bindPopup('A pretty CSS3 popup.<br> Easily customizable.') .openPopup(); This adds a marker as a new layer to the map. It expects at least an array with pair of LatLon coordinates. .bindPopup() adds a popup with custom HTML content inside. .openPopup() opens the popup programmatically.","title":"Marker"},{"location":"leaflet/#check-a-live-version-of-this-basic-example-here-feel-free-to-play-with-it","text":"","title":"Check a live version of this basic example here. Feel free to play with it!"},{"location":"leaflet/#adding-a-geojson-layer","text":"Another possibility for adding data to a Leaflet map would be loading a set of geometries (and their properties) using a geoJSON file. We're going to use this Spanish cities dataset . First thing we need to do is storing the geoJSON features in a variable (on populated_places.js file) and load the file on the HTML's <head> section: <script src=\"populated_places.js\"></script> After that, adding the features as a vector layer in Leaflet is quite easy: L.geoJSON(populatedPlaces, {}).addTo(map); Note that we're just referencing the variable name, and not passing any other option to geoJSON() method. We'll come back to that later. This approach has a very important drawback. Vector layers in Leaflet use a lot of memory on the browser, which leads to slow map performance depending on the computer and the amount of features to be loaded. This really wouldn't work for a map with thousands of features, but is a nice and easy approach for a map in the range of a few hundreds features.","title":"Adding a GeoJSON layer"},{"location":"leaflet/#styling-a-geojson-layer","text":"Let's dig a bit more on how to work with geoJSON layers, with some cartographic enhancements. Leaflet uses functions that return certain values or objects in order to set layer options. For example: pointToLayer option defines the way in which each point geometry is going to be represented on the map. By default it returns a L.marker object, but we can set different options for different symbolizers, such as: javascript pointToLayer: function(feature,latlng){ return L.circleMarker(latlng) } Note the function expects two arguments: feature makes reference to each point feature on the layer. latlng is a L.latLng object that contains the geographic position of the feature. Those arguments could be used inside the function to play with them as you want. They could be called however you like, but bear in mind the first one will always make reference to the feature, and the second to the L.latLng object. style option is used to set the styling rules for the layer. It only expects a feature argument javascript style: function(feature){ return { \"fillColor\":\"#F00\", \"fillOpacity\":0.6, \"stroke\":false, \"radius\":feature.properties.pop_max/100000 } } In this case, the function returns an object with a key/value configuration. It applies the same style to every feature, but we could also add some conditional structure to create a choropleth map. Note that we can use the feature variable inside the function to make reference to the feature's properties and use them to set style rules. There are other options that add functionality to the layer, we'll see some of them later but check this link for the complete reference.","title":"Styling a GeoJSON layer"},{"location":"leaflet/#adding-a-pop-up","text":"We could add a simple, static Popup that shows the same content for every feature in the map, using the bindPopup() method we saw before. However, in order to create dynamic Popups that show information stored as feature properties, we need a different approach. We'll do so by passing another option to L.geoJSON layer declaration: onEachFeature: function(feature,layer){ layer.bindPopup( '<h2>'+feature.properties.name+'</h2>'+ '<b>Population:</b> '+feature.properties.pop_max ) } This will render the HTML code passed as argument to the function, but is also able to get values from the feature properties.","title":"Adding a Pop-up"},{"location":"leaflet/#filtering-the-layer","text":"We could also apply a filter based on each feature properties, the filter options iterate over the geojson layer and applies the function we have defined to return true or false depending on whether a feature should be rendered or not. filter: function(feature){ if (feature.properties.pop_max < 100000){ return false } else { return true } } The filter above will only show cities with more than 100K inhabitants.","title":"Filtering the layer"},{"location":"leaflet/#events","text":"Registering an event allows to perform certain actions based on changes on the map state, user interaction, etc We can easily register an event and set the subsequent actions like this: map.on('moveend', function(){ coords.innerHTML='<b> CENTER: </b>'+map.getCenter() }) .on('zoomend', function(){ zoom.innerHTML='<b>ZOOM: </b>'+map.getZoom() }); In this case, we're updating the HTML content of coords and zoom DOM elements after the map position or zoom level changes. We could also listen to layer events: .on('click', function(e){ map.panTo(e.latlng) coords.innerHTML=e.latlng }); In this case, we make use of the event object (referenced with e ), in order to use one of its properties ( e.latlng )","title":"Events"},{"location":"leaflet/#play-with-a-live-example","text":"","title":"Play with a live example"},{"location":"sf_trees/","text":"San Francisco tree map 1. Import and create map 1. 1. Download and import the dataset Go to https://team.carto.com/u/builder-demo/tables/sf_trees/public/map Download the dataset as a CSV file Go to your account and import it using the NEW DATASET options 1. 2. Dataset view Take a look on the dataset Switch between the metadata and the SQL view, try any simple query like limiting the result. Take a look on the spatial distribution using the PREVIEW option Click on CREATE MAP . 2. Layers and styles 2. 1. Ordering of the layers in the Builder Change the basemap to the Dark Matter (labels below) basemap and check the different basemaps options. Note how the layer we added gets the A0 identifier. This is not important now but it will be later when adding analysis and widgets. 2. 2. Layer options DATA : This interface gives a general view of the fields the layer, its name and its data type but also from there you can add them as widgets. Use the slider button to switch from VALUES to SQL . The SQL view allows more advanced users to manage data in a more precise way. Finally, use the button in the bottom left corner of the map to switch between Data view and Map view . STYLE : In the Aggregation menu , select NONE*. In the FILL options, select BY VALUE and then choose the common_species column to color the dots depending on its values. Change the size of the dots to 3 and change the stroke value of the points to 0 . POP-UP : Select the HOVER tab and the LIGHT style for the hover infowindow. In the Show Items options, select the common_species field and change its name to Common Species . By doing this, a pop-up will appear when we hover over the points on the map. 3. Widgets 3. 1. Category Widget Navigate back to WIDGETS pane and click on ADD WIDGET . In the options of the CATEGORY tab, click the common_species and caretaker checkboxes in order to have widgets that display the different categories of the common_species and caretaker fields. Click CONTINUE to add the widgets on the map. 3. 2. Time series widget Back to the main menu, go to WIDGETS tab and click on ADD WIDGET . In the options of the TIME-SERIES tab, select the plant_date checkbox in order to display the dates were the trees were planted. Click CONTINUE to add the widgets on the map. 3. 3. Change order and name of widgets Back to the main menu, select the WIDGETS tab to see a list with the widgets that we have added. We can drag and drop the widgets in the widget pane to change their order. We can change the name of our widgets by selecting the RENAME option of the widget menu or by double clicking on the widget name in the WIDGETS pane. Change the name of the common_species widget to Common Species , the name of the caretaker widget to Caretaker and the name of the plant_date widget to Plant Date . 4. Share map At the bottom of the main menu, click on SHARE . Go to PUBLISH tab and click on PUBLISH button that is below the Map name in order to share our map. After clicking on PUBLISH , we can select the options that we want to share our map.","title":"San Francisco tree map"},{"location":"sf_trees/#san-francisco-tree-map","text":"","title":"San Francisco tree map"},{"location":"sf_trees/#1-import-and-create-map","text":"","title":"1. Import and create map"},{"location":"sf_trees/#1-1-download-and-import-the-dataset","text":"Go to https://team.carto.com/u/builder-demo/tables/sf_trees/public/map Download the dataset as a CSV file Go to your account and import it using the NEW DATASET options","title":"1. 1. Download and import the dataset"},{"location":"sf_trees/#1-2-dataset-view","text":"Take a look on the dataset Switch between the metadata and the SQL view, try any simple query like limiting the result. Take a look on the spatial distribution using the PREVIEW option Click on CREATE MAP .","title":"1. 2. Dataset view"},{"location":"sf_trees/#2-layers-and-styles","text":"","title":"2. Layers and styles"},{"location":"sf_trees/#2-1-ordering-of-the-layers-in-the-builder","text":"Change the basemap to the Dark Matter (labels below) basemap and check the different basemaps options. Note how the layer we added gets the A0 identifier. This is not important now but it will be later when adding analysis and widgets.","title":"2. 1. Ordering of the layers in the Builder"},{"location":"sf_trees/#2-2-layer-options","text":"DATA : This interface gives a general view of the fields the layer, its name and its data type but also from there you can add them as widgets. Use the slider button to switch from VALUES to SQL . The SQL view allows more advanced users to manage data in a more precise way. Finally, use the button in the bottom left corner of the map to switch between Data view and Map view . STYLE : In the Aggregation menu , select NONE*. In the FILL options, select BY VALUE and then choose the common_species column to color the dots depending on its values. Change the size of the dots to 3 and change the stroke value of the points to 0 . POP-UP : Select the HOVER tab and the LIGHT style for the hover infowindow. In the Show Items options, select the common_species field and change its name to Common Species . By doing this, a pop-up will appear when we hover over the points on the map.","title":"2. 2. Layer options"},{"location":"sf_trees/#3-widgets","text":"","title":"3. Widgets"},{"location":"sf_trees/#3-1-category-widget","text":"Navigate back to WIDGETS pane and click on ADD WIDGET . In the options of the CATEGORY tab, click the common_species and caretaker checkboxes in order to have widgets that display the different categories of the common_species and caretaker fields. Click CONTINUE to add the widgets on the map.","title":"3. 1. Category Widget"},{"location":"sf_trees/#3-2-time-series-widget","text":"Back to the main menu, go to WIDGETS tab and click on ADD WIDGET . In the options of the TIME-SERIES tab, select the plant_date checkbox in order to display the dates were the trees were planted. Click CONTINUE to add the widgets on the map.","title":"3. 2. Time series widget"},{"location":"sf_trees/#3-3-change-order-and-name-of-widgets","text":"Back to the main menu, select the WIDGETS tab to see a list with the widgets that we have added. We can drag and drop the widgets in the widget pane to change their order. We can change the name of our widgets by selecting the RENAME option of the widget menu or by double clicking on the widget name in the WIDGETS pane. Change the name of the common_species widget to Common Species , the name of the caretaker widget to Caretaker and the name of the plant_date widget to Plant Date .","title":"3. 3. Change order and name of widgets"},{"location":"sf_trees/#4-share-map","text":"At the bottom of the main menu, click on SHARE . Go to PUBLISH tab and click on PUBLISH button that is below the Map name in order to share our map. After clicking on PUBLISH , we can select the options that we want to share our map.","title":"4. Share map"},{"location":"spatial_sql/","text":"Spatial SQL In this section you'll have the chance to test some of the most common PostGIS SQL procedures. Contents Spatial SQL Contents Set up PostGIS concepts: geometry vs. geography the_geom vs. the_geom_webmercator SQL that applies to all geometries Transforming geometries into a different projection World Robinson Translating Geometries Buffer (ST_Buffer) Simple Buffer Dissolve Buffers SQL for Points Know wether a geometry is within the given range from another geometry: Making lines Simple lines Multiple lines Sequential lines Great Circles (curved lines) SQL for Polygons Get the number of points inside a polygon Get the difference between two geometries: Negative buffer Spatial Joins SQL for CARTO CDB_LatLng() Grids Hexagon Grids Rectangular Grids Set up For this exercise, we will use CARTO as a convenient way to interact with PostGIS, which will require no installation or configuration by you. You won't even need an account; we're using public demo datasets. However, you could always download the datasets and import them to your own CARTO account before starting. These are the datasets that you will need to complete the exercises. You can download them from the links below and import them to your CARTO account. ne_10m_populated_places_simple : Populated places in the world. ne_110m_admin_0_countries : Countries railroad_data : Raiload accidents in the US barcelona_building_footprints : City blocks in Barcelona lineas_madrid : Madrid's Metro lines listings_madrid : AirBnB data for Madrid As a client for this workshop, we will use a web application that can interact with CARTO: Franchise . From the side menu, navigate to 'CARTO', then use the following parameters to connect: Host name: carto.com User name: carto-workshops (or your own username) API key: you can leave this empty Once connected, you can run SELECT queries against any public dataset from that account. Some tables you have available to you from this account are: ne_10m_populated_places_simple : Natural Earth populated places ne_110m_admin_0_countries : Natural Earth country boundaries railroad_data : Railroad accidents in the USA barcelona_building_footprints : Barcelona blocks lineas_madrid : Madrid metro lines listings_madrid : Madrid Airbnb listings Try entering a simple query like the one below. To run the query, type Control+Enter on PCs, Command+Enter / Cmd+Return on macs, or press the green play button in the bottom right corner of the SQL panel. select * from listings_madrid where bathrooms >= 3 After applying a query, you should see the results in the map. If it becomes unresponsive, normally just refreshing the page will make it work again. PostGIS concepts: geometry vs. geography Geometry uses a cartesian plane to measure and store features (CRS units): The basis for the PostGIS geometry type is a plane. The shortest path between two points on the plane is a straight line. That means calculations on geometries (areas, distances, lengths, intersections, etc) can be calculated using cartesian mathematics and straight line vectors. Geography uses a sphere to measure and store features (Meters): The basis for the PostGIS geography type is a sphere. The shortest path between two points on the sphere is a great circle arc. That means that calculations on geographies (areas, distances, lengths, intersections, etc) must be calculated on the sphere, using more complicated mathematics. For more accurate measurements, the calculations must take the actual spheroidal shape of the world into account, and the mathematics becomes very complicated indeed. More about the geography type can be found here and here . Source: Boundless Postgis intro the_geom vs. the_geom_webmercator the_geom EPSG:4326. Unprojected coordinates in decimal degrees (Lon/Lat). WGS84 Spheroid. the_geom_webmercator EPSG:3857. UTM projected coordinates in meters . This is a conventional Coordinate Reference System, widely accepted as a 'de facto' standard in webmapping. In CARTO, the_geom_webmercator column is the one we see represented in the map . Know more about projections: Map Projections in Wikipedia . In this CARTO blog post . SQL that applies to all geometries The following queries will work on all geometries: point, line, and polygon. Transforming geometries into a different projection World Robinson SELECT cartodb_id, ST_Transform(the_geom, 54030) AS the_geom_webmercator FROM ne_50m_land About working with different projections in CARTO and ST_Transform . This application displays several popular map projections and gives some information on each. Translating Geometries SELECT cartodb_id, ST_Transform(ST_Translate(the_geom,5.0,7.4), 3857) as the_geom_webmercator FROM ne_50m_land WHERE ST_Intersects( the_geom, ST_MakeEnvelope(-18.748169,27.571591,-13.342896,29.463514,4326) ) Buffer (ST_Buffer) Simple Buffer ST_Buffer uses the input geometry's unit of measure, which in the case of our the_geom is decimal degrees. In order to use meters as our buffer unit, we must cast our geometry to a geography, then back to a geometry once we have our buffer. Alternatively, if you just want to visualize you can simply use the_geom_webmercator , as it's unit of measure is already meters. About ST_Buffer . SELECT ST_Transform( ST_Buffer( the_geom::geography, 10000*5 )::geometry, 3857) As the_geom_webmercator, 1 as cartodb_id FROM ne_10m_populated_places_simple WHERE adm0name ILIKE 'spain' Dissolve Buffers SELECT row_number() over() as cartodb_id, ST_UnaryUnion(grp) as the_geom, st_transform( ST_UnaryUnion(grp) ,3857 ) as the_geom_webmercator, ST_NumGeometries(grp) as num_geoms FROM (SELECT UNNEST( ST_ClusterWithin( ( ST_BUFFER( (the_geom::geography) ,10000*5 )::geometry ) ,0.0001) ) AS grp FROM ne_10m_populated_places_simple WHERE adm0name ILIKE 'spain') sq SQL for Points Know wether a geometry is within the given range from another geometry: SELECT a.* FROM ne_10m_populated_places_simple a, ne_10m_populated_places_simple b WHERE a.cartodb_id != b.cartodb_id AND ST_DWithin( a.the_geom_webmercator, b.the_geom_webmercator, 150000) AND a.adm0name = 'Spain' AND b.adm0name = 'Spain' In this case, we are using the_geom_webmercator to avoid casting to geography type. Calculations made with geometry type takes the CRS units. Keep in mind that CRS units in webmercator are not meters , and they depend directly on the latitude. About ST_DWithin . Making lines Simple lines WITH b as (SELECT * FROM ne_10m_populated_places_simple WHERE name ilike 'barcelona' and adm0name ilike 'spain'), m as (SELECT * FROM ne_10m_populated_places_simple WHERE name ilike 'madrid') SELECT ST_Transform(ST_MakeLine(b.the_geom, m.the_geom),3857) as the_geom_webmercator, b.cartodb_id FROM b, m Multiple lines WITH spain as (SELECT * FROM ne_10m_populated_places_simple WHERE adm0name ILIKE 'spain'), madrid as (SELECT * FROM spain WHERE name ILIKE 'Madrid') SELECT ST_Transform(ST_MakeLine(m.the_geom, s.the_geom),3857) as the_geom_webmercator, s.cartodb_id FROM spain s, madrid m WHERE s.cartodb_id <> m.cartodb_id Sequential lines SELECT ST_MakeLine(the_geom_webmercator ORDER BY ST_X(the_geom), ST_Y(the_geom) ASC) as the_geom_webmercator, min(cartodb_id) as cartodb_id FROM ne_10m_populated_places_simple WHERE adm0name ILIKE 'spain' Great Circles (curved lines) SELECT ST_Transform( ST_Segmentize( ST_Makeline( a.the_geom, b.the_geom )::geography, 100000 )::geometry, 3857 ) as the_geom_webmercator FROM ( SELECT * FROM ne_10m_populated_places_simple WHERE name ILIKE 'madrid' ) as a, ( SELECT * FROM ne_10m_populated_places_simple WHERE name ILIKE 'new york' ) as b About Great Circles . SQL for Polygons Get the number of points inside a polygon Using GROUP BY : SELECT e.cartodb_id, e.admin, e.the_geom_webmercator, count(*) AS pp_count, sum(p.pop_max) as sum_pop FROM ne_adm0_europe e JOIN ne_10m_populated_places_simple p ON ST_Intersects(p.the_geom, e.the_geom) GROUP BY e.cartodb_id Using LATERAL : SELECT a.cartodb_id, a.admin AS name, a.the_geom_webmercator, counts.number_cities AS pp_count, counts.sum_pop FROM ne_adm0_europe a CROSS JOIN LATERAL ( SELECT count(*) as number_cities, sum(pop_max) as sum_pop FROM ne_10m_populated_places_simple b WHERE ST_Intersects(a.the_geom, b.the_geom) ) AS counts About ST_Intersects and Lateral JOIN Note: You know about the EXPLAIN ANALYZE function? use it to take a look on how both queries are pretty similar in terms of performance. Get the difference between two geometries: SELECT a.cartodb_id, ST_Difference( a.the_geom_webmercator, b.the_geom_webmercator ) AS the_geom_webmercator FROM ne_50m_land a, ne_adm0_europe b WHERE b.adm0_a3 like 'ESP' About ST_Difference . Negative buffer SELECT cartodb_id, ST_Transform( ST_Buffer( the_geom::geography, -30000 )::geometry, 3857) As the_geom_webmercator FROM world_borders WHERE name ilike 'spain' Spatial Joins with metro_lines as ( SELECT row_number() over() as cartodb_id, ST_Buffer( the_geom::geography, 100 )::geometry as the_geom, ST_Transform( ST_Buffer( the_geom::geography, 100 )::geometry, 3857) As the_geom_webmercator FROM lineas_madrid ) select x.*, y.cartodb_id as joined from listings_madrid x left join metro_lines y on st_intersects(x.the_geom, y.the_geom) In the above example, you can see where the points joined on the buffer of the metro lines, and where they didn't based on if the cartodb_id for the lines existed in the points dataset. SQL for CARTO CDB_LatLng() cdb_latlng() is a shortcut to the function ST_SetSRID(ST_Point(),srid) , with the default srid set as 4326 , the srid of the_geom . One notable difference is that ST_Point() takes coordinate pairs in the order of (longitude, latitude) , whereas cdb_latlng() takes coordinate pairs in the order of (latitude, longitude) . SELECT 1 as cartodb_id, CDB_LatLng(0,0) as the_geom, ST_Transform(CDB_LatLng(0, 0), 3857) as the_geom_webmercator /* ST_SetSRID(ST_MakePoint(0, 0), 4326) */ Grids Hexagon Grids WITH grid as ( SELECT row_number() over () as cartodb_id, CDB_HexagonGrid( ST_Buffer(the_geom_webmercator, 1000000), 10000 ) AS the_geom_webmercator FROM world_borders WHERE name ILIKE 'spain') SELECT grid.the_geom_webmercator, grid.cartodb_id FROM grid, world_borders a WHERE ST_Intersects(grid.the_geom_webmercator, a.the_geom_webmercator) AND name ILIKE 'spain' About CDB_HexagonGrid Rectangular Grids WITH grid as ( SELECT row_number() over () as cartodb_id, CDB_RectangleGrid( ST_Buffer(the_geom_webmercator, 1000000), 25000, 25000 ) AS the_geom_webmercator FROM world_borders WHERE name ILIKE 'spain') SELECT grid.the_geom_webmercator, grid.cartodb_id FROM grid, world_borders a WHERE ST_Intersects(grid.the_geom_webmercator, a.the_geom_webmercator) AND name ILIKE 'spain' About CDB_RectangleGrid You can read more about CARTO custom spatial queries here .","title":"Spatial SQL"},{"location":"spatial_sql/#spatial-sql","text":"In this section you'll have the chance to test some of the most common PostGIS SQL procedures.","title":"Spatial SQL"},{"location":"spatial_sql/#contents","text":"Spatial SQL Contents Set up PostGIS concepts: geometry vs. geography the_geom vs. the_geom_webmercator SQL that applies to all geometries Transforming geometries into a different projection World Robinson Translating Geometries Buffer (ST_Buffer) Simple Buffer Dissolve Buffers SQL for Points Know wether a geometry is within the given range from another geometry: Making lines Simple lines Multiple lines Sequential lines Great Circles (curved lines) SQL for Polygons Get the number of points inside a polygon Get the difference between two geometries: Negative buffer Spatial Joins SQL for CARTO CDB_LatLng() Grids Hexagon Grids Rectangular Grids","title":"Contents"},{"location":"spatial_sql/#set-up","text":"For this exercise, we will use CARTO as a convenient way to interact with PostGIS, which will require no installation or configuration by you. You won't even need an account; we're using public demo datasets. However, you could always download the datasets and import them to your own CARTO account before starting. These are the datasets that you will need to complete the exercises. You can download them from the links below and import them to your CARTO account. ne_10m_populated_places_simple : Populated places in the world. ne_110m_admin_0_countries : Countries railroad_data : Raiload accidents in the US barcelona_building_footprints : City blocks in Barcelona lineas_madrid : Madrid's Metro lines listings_madrid : AirBnB data for Madrid As a client for this workshop, we will use a web application that can interact with CARTO: Franchise . From the side menu, navigate to 'CARTO', then use the following parameters to connect: Host name: carto.com User name: carto-workshops (or your own username) API key: you can leave this empty Once connected, you can run SELECT queries against any public dataset from that account. Some tables you have available to you from this account are: ne_10m_populated_places_simple : Natural Earth populated places ne_110m_admin_0_countries : Natural Earth country boundaries railroad_data : Railroad accidents in the USA barcelona_building_footprints : Barcelona blocks lineas_madrid : Madrid metro lines listings_madrid : Madrid Airbnb listings Try entering a simple query like the one below. To run the query, type Control+Enter on PCs, Command+Enter / Cmd+Return on macs, or press the green play button in the bottom right corner of the SQL panel. select * from listings_madrid where bathrooms >= 3 After applying a query, you should see the results in the map. If it becomes unresponsive, normally just refreshing the page will make it work again.","title":"Set up"},{"location":"spatial_sql/#postgis-concepts-geometry-vs-geography","text":"Geometry uses a cartesian plane to measure and store features (CRS units): The basis for the PostGIS geometry type is a plane. The shortest path between two points on the plane is a straight line. That means calculations on geometries (areas, distances, lengths, intersections, etc) can be calculated using cartesian mathematics and straight line vectors. Geography uses a sphere to measure and store features (Meters): The basis for the PostGIS geography type is a sphere. The shortest path between two points on the sphere is a great circle arc. That means that calculations on geographies (areas, distances, lengths, intersections, etc) must be calculated on the sphere, using more complicated mathematics. For more accurate measurements, the calculations must take the actual spheroidal shape of the world into account, and the mathematics becomes very complicated indeed. More about the geography type can be found here and here . Source: Boundless Postgis intro","title":"PostGIS concepts: geometry vs. geography"},{"location":"spatial_sql/#the_geom-vs-the_geom_webmercator","text":"the_geom EPSG:4326. Unprojected coordinates in decimal degrees (Lon/Lat). WGS84 Spheroid. the_geom_webmercator EPSG:3857. UTM projected coordinates in meters . This is a conventional Coordinate Reference System, widely accepted as a 'de facto' standard in webmapping. In CARTO, the_geom_webmercator column is the one we see represented in the map . Know more about projections: Map Projections in Wikipedia . In this CARTO blog post .","title":"the_geom vs. the_geom_webmercator"},{"location":"spatial_sql/#sql-that-applies-to-all-geometries","text":"The following queries will work on all geometries: point, line, and polygon.","title":"SQL that applies to all geometries"},{"location":"spatial_sql/#transforming-geometries-into-a-different-projection","text":"","title":"Transforming geometries into a different projection"},{"location":"spatial_sql/#world-robinson","text":"SELECT cartodb_id, ST_Transform(the_geom, 54030) AS the_geom_webmercator FROM ne_50m_land About working with different projections in CARTO and ST_Transform . This application displays several popular map projections and gives some information on each.","title":"World Robinson"},{"location":"spatial_sql/#translating-geometries","text":"SELECT cartodb_id, ST_Transform(ST_Translate(the_geom,5.0,7.4), 3857) as the_geom_webmercator FROM ne_50m_land WHERE ST_Intersects( the_geom, ST_MakeEnvelope(-18.748169,27.571591,-13.342896,29.463514,4326) )","title":"Translating Geometries"},{"location":"spatial_sql/#buffer-st_buffer","text":"","title":"Buffer (ST_Buffer)"},{"location":"spatial_sql/#simple-buffer","text":"ST_Buffer uses the input geometry's unit of measure, which in the case of our the_geom is decimal degrees. In order to use meters as our buffer unit, we must cast our geometry to a geography, then back to a geometry once we have our buffer. Alternatively, if you just want to visualize you can simply use the_geom_webmercator , as it's unit of measure is already meters. About ST_Buffer . SELECT ST_Transform( ST_Buffer( the_geom::geography, 10000*5 )::geometry, 3857) As the_geom_webmercator, 1 as cartodb_id FROM ne_10m_populated_places_simple WHERE adm0name ILIKE 'spain'","title":"Simple Buffer"},{"location":"spatial_sql/#dissolve-buffers","text":"SELECT row_number() over() as cartodb_id, ST_UnaryUnion(grp) as the_geom, st_transform( ST_UnaryUnion(grp) ,3857 ) as the_geom_webmercator, ST_NumGeometries(grp) as num_geoms FROM (SELECT UNNEST( ST_ClusterWithin( ( ST_BUFFER( (the_geom::geography) ,10000*5 )::geometry ) ,0.0001) ) AS grp FROM ne_10m_populated_places_simple WHERE adm0name ILIKE 'spain') sq","title":"Dissolve Buffers"},{"location":"spatial_sql/#sql-for-points","text":"","title":"SQL for Points"},{"location":"spatial_sql/#know-wether-a-geometry-is-within-the-given-range-from-another-geometry","text":"SELECT a.* FROM ne_10m_populated_places_simple a, ne_10m_populated_places_simple b WHERE a.cartodb_id != b.cartodb_id AND ST_DWithin( a.the_geom_webmercator, b.the_geom_webmercator, 150000) AND a.adm0name = 'Spain' AND b.adm0name = 'Spain' In this case, we are using the_geom_webmercator to avoid casting to geography type. Calculations made with geometry type takes the CRS units. Keep in mind that CRS units in webmercator are not meters , and they depend directly on the latitude. About ST_DWithin .","title":"Know wether a geometry is within the given range from another geometry:"},{"location":"spatial_sql/#making-lines","text":"","title":"Making lines"},{"location":"spatial_sql/#simple-lines","text":"WITH b as (SELECT * FROM ne_10m_populated_places_simple WHERE name ilike 'barcelona' and adm0name ilike 'spain'), m as (SELECT * FROM ne_10m_populated_places_simple WHERE name ilike 'madrid') SELECT ST_Transform(ST_MakeLine(b.the_geom, m.the_geom),3857) as the_geom_webmercator, b.cartodb_id FROM b, m","title":"Simple lines"},{"location":"spatial_sql/#multiple-lines","text":"WITH spain as (SELECT * FROM ne_10m_populated_places_simple WHERE adm0name ILIKE 'spain'), madrid as (SELECT * FROM spain WHERE name ILIKE 'Madrid') SELECT ST_Transform(ST_MakeLine(m.the_geom, s.the_geom),3857) as the_geom_webmercator, s.cartodb_id FROM spain s, madrid m WHERE s.cartodb_id <> m.cartodb_id","title":"Multiple lines"},{"location":"spatial_sql/#sequential-lines","text":"SELECT ST_MakeLine(the_geom_webmercator ORDER BY ST_X(the_geom), ST_Y(the_geom) ASC) as the_geom_webmercator, min(cartodb_id) as cartodb_id FROM ne_10m_populated_places_simple WHERE adm0name ILIKE 'spain'","title":"Sequential lines"},{"location":"spatial_sql/#_1","text":"","title":""},{"location":"spatial_sql/#great-circles-curved-lines","text":"SELECT ST_Transform( ST_Segmentize( ST_Makeline( a.the_geom, b.the_geom )::geography, 100000 )::geometry, 3857 ) as the_geom_webmercator FROM ( SELECT * FROM ne_10m_populated_places_simple WHERE name ILIKE 'madrid' ) as a, ( SELECT * FROM ne_10m_populated_places_simple WHERE name ILIKE 'new york' ) as b About Great Circles .","title":"Great Circles (curved lines)"},{"location":"spatial_sql/#sql-for-polygons","text":"","title":"SQL for Polygons"},{"location":"spatial_sql/#get-the-number-of-points-inside-a-polygon","text":"Using GROUP BY : SELECT e.cartodb_id, e.admin, e.the_geom_webmercator, count(*) AS pp_count, sum(p.pop_max) as sum_pop FROM ne_adm0_europe e JOIN ne_10m_populated_places_simple p ON ST_Intersects(p.the_geom, e.the_geom) GROUP BY e.cartodb_id Using LATERAL : SELECT a.cartodb_id, a.admin AS name, a.the_geom_webmercator, counts.number_cities AS pp_count, counts.sum_pop FROM ne_adm0_europe a CROSS JOIN LATERAL ( SELECT count(*) as number_cities, sum(pop_max) as sum_pop FROM ne_10m_populated_places_simple b WHERE ST_Intersects(a.the_geom, b.the_geom) ) AS counts About ST_Intersects and Lateral JOIN Note: You know about the EXPLAIN ANALYZE function? use it to take a look on how both queries are pretty similar in terms of performance.","title":"Get the number of points inside a polygon"},{"location":"spatial_sql/#get-the-difference-between-two-geometries","text":"SELECT a.cartodb_id, ST_Difference( a.the_geom_webmercator, b.the_geom_webmercator ) AS the_geom_webmercator FROM ne_50m_land a, ne_adm0_europe b WHERE b.adm0_a3 like 'ESP' About ST_Difference .","title":"Get the difference between two geometries:"},{"location":"spatial_sql/#negative-buffer","text":"SELECT cartodb_id, ST_Transform( ST_Buffer( the_geom::geography, -30000 )::geometry, 3857) As the_geom_webmercator FROM world_borders WHERE name ilike 'spain'","title":"Negative buffer"},{"location":"spatial_sql/#spatial-joins","text":"with metro_lines as ( SELECT row_number() over() as cartodb_id, ST_Buffer( the_geom::geography, 100 )::geometry as the_geom, ST_Transform( ST_Buffer( the_geom::geography, 100 )::geometry, 3857) As the_geom_webmercator FROM lineas_madrid ) select x.*, y.cartodb_id as joined from listings_madrid x left join metro_lines y on st_intersects(x.the_geom, y.the_geom) In the above example, you can see where the points joined on the buffer of the metro lines, and where they didn't based on if the cartodb_id for the lines existed in the points dataset.","title":"Spatial Joins"},{"location":"spatial_sql/#sql-for-carto","text":"","title":"SQL for CARTO"},{"location":"spatial_sql/#cdb_latlng","text":"cdb_latlng() is a shortcut to the function ST_SetSRID(ST_Point(),srid) , with the default srid set as 4326 , the srid of the_geom . One notable difference is that ST_Point() takes coordinate pairs in the order of (longitude, latitude) , whereas cdb_latlng() takes coordinate pairs in the order of (latitude, longitude) . SELECT 1 as cartodb_id, CDB_LatLng(0,0) as the_geom, ST_Transform(CDB_LatLng(0, 0), 3857) as the_geom_webmercator /* ST_SetSRID(ST_MakePoint(0, 0), 4326) */","title":"CDB_LatLng()"},{"location":"spatial_sql/#grids","text":"","title":"Grids"},{"location":"spatial_sql/#hexagon-grids","text":"WITH grid as ( SELECT row_number() over () as cartodb_id, CDB_HexagonGrid( ST_Buffer(the_geom_webmercator, 1000000), 10000 ) AS the_geom_webmercator FROM world_borders WHERE name ILIKE 'spain') SELECT grid.the_geom_webmercator, grid.cartodb_id FROM grid, world_borders a WHERE ST_Intersects(grid.the_geom_webmercator, a.the_geom_webmercator) AND name ILIKE 'spain' About CDB_HexagonGrid","title":"Hexagon Grids"},{"location":"spatial_sql/#rectangular-grids","text":"WITH grid as ( SELECT row_number() over () as cartodb_id, CDB_RectangleGrid( ST_Buffer(the_geom_webmercator, 1000000), 25000, 25000 ) AS the_geom_webmercator FROM world_borders WHERE name ILIKE 'spain') SELECT grid.the_geom_webmercator, grid.cartodb_id FROM grid, world_borders a WHERE ST_Intersects(grid.the_geom_webmercator, a.the_geom_webmercator) AND name ILIKE 'spain' About CDB_RectangleGrid You can read more about CARTO custom spatial queries here .","title":"Rectangular Grids"}]}